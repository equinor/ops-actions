# Rotate secrets for an Azure SQL Server and store them in an Azure Key Vault.

on:
  workflow_call:
    inputs:
      environment:
        description: The GitHub environment that the jobs reference.
        required: true
        type: string

      client_id:
        description: The client ID of the Azure Service Principal used for authenticating to Azure.
        required: true
        type: string

      tenant_id:
        description: The tenant ID of the Azure Service Principal used for authenticating to Azure.
        required: true
        type: string

      subscription_id:
        description: The ID of the Azure Subscription containing the Azure resources.
        required: true
        type: string

      server_name:
        description: The name of the Azure SQL Server to rotate secrets for.
        required: true
        type: string

      resource_group_name:
        description: The name of the Azure resource group containing the Azure SQL Server.
        required: true
        type: string

      vault_name:
        description: The name of the Azure Key Vault to store the Azure SQL Server secrets in.
        required: true
        type: string

    secrets:
      client_secret:
        description: The client secret of the Azure Service Principal used for authenticating to Azure.
        required: true

jobs:
  admin-password:
    name: Admin password
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Run PowerShell script
        uses: azure/powershell@v1
        with:
          azPSVersion: "5.9.0" # Version 6 throws an error when trying to update SQL server password using a service principal.
          inlineScript: |
            $ClientId = '${{ inputs.client_id }}'
            $ClientSecret = ConvertTo-SecureString '${{ secrets.client_secret }}' -AsPlainText -Force
            $TenantId = '${{ inputs.tenant_id}}'
            $SubscriptionId = '${{ inputs.subscription_id }}'
            $ServerName = '${{ inputs.server_name }}'
            $ResourceGroupName = '${{ inputs.resource_group_name }}'
            $VaultName = '${{ inputs.vault_name }}'
            $SecretName = 'SqlServerAdminLogin'

            $Credential = New-Object System.Management.Automation.PSCredential($ClientId, $ClientSecret)
            $null = Connect-AzAccount -ServicePrincipal -TenantId $TenantId -Credential $Credential
            $null = Set-AzContext -SubscriptionId $SubscriptionId

            Write-Host 'Generating random password...'
            $Characters = 'a'..'z' + 'A'..'Z' + '0'..'9' + '!$#%'.ToCharArray()
            do {
              $Password = ''
              for ($i = 0; $i -lt 128; $i++) {
                $Password += $Characters | Get-Random
              }
              $HasLower = $Password -cmatch '[a-z]'
              $HasUpper = $Password -cmatch '[A-Z]'
              $HasDigit = $Password -match '[0-9]'
            }
            until ($HasLower -and $HasUpper -and $HasDigit)
            $Password = $Password | ConvertTo-SecureString -AsPlainText -Force

            Write-Host "Updating admin password for SQL server '$ServerName'..."
            $null = Set-AzSqlServer -ServerName $ServerName -ResourceGroupName $ResourceGroupName -SqlAdministratorPassword $Password

            $KeyVaultFirewall = (Get-AzKeyVault -VaultName $VaultName).NetworkAcls
            $KeyVaultFirewallRules = $KeyVaultFirewall.IpAddressRanges
            $PublicIp = "$((Invoke-WebRequest -uri 'http://ifconfig.me/ip').Content)/32"
            $KeyVaultFirewallEnabled = $KeyVaultFirewall.DefaultAction -eq 'Deny' -and $KeyVaultFirewallRules -notcontains $PublicIp

            try {
              if ($KeyVaultFirewallEnabled) {
                Write-Host "Adding public IP '$PublicIP' to firewall rules for key vault '$VaultName'..."
                $null = Update-AzKeyVaultNetworkRuleSet -VaultName $VaultName -IpAddressRange ($KeyVaultFirewallRules + $PublicIp)
              }

              Write-Host "Updating value of key vault secret '$SecretName'..."
              $SecretExpires = (Get-Date).AddYears(1)
              $Secret = Set-AzKeyVaultSecret -Name $SecretName -VaultName $VaultName -SecretValue $Password -ContentType 'password' -Expires $SecretExpires
              $Secret

              Write-Host "Disabling old versions of key vault secret '$SecretName'..."
              $SecretVersions = (Get-AzKeyVaultSecret -Name $SecretName -VaultName $VaultName -IncludeVersions | Where-Object { $_.Enabled }).Version
              foreach ($v in $SecretVersions) {
                if ($v -ne $Secret.Version) {
                  $null = Update-AzKeyVaultSecret -Name $SecretName -VaultName $VaultName -Version $v -Enable $false
                }
              }
            }
            catch {
              Write-Error $_.Exception
            }
            finally {
              if ($KeyVaultFirewallEnabled) {
                Write-Host "Restoring firewall rules for key vault '$VaultName'..."
                $null = Update-AzKeyVaultNetworkRuleSet -VaultName $VaultName -IpAddressRange $KeyVaultFirewallRules
              }
            }

            $null = Disconnect-AzAccount
