# Package your Python project.
# Ref: https://packaging.python.org/en/latest/tutorials/packaging-projects/

name: â™» python-release

on:
  workflow_call:
    inputs:
      runs_on:
        description: The label of the runner (GitHub- or self-hosted) to run this workflow on. Defaults to `ubuntu-24.04`.
        type: string
        required: false
        default: ubuntu-24.04

      environment:
        description: The name of the GitHub environment that this workflow should use for publishing.
        type: string
        required: false

permissions: {}

jobs:
  release-please:
    name: Release Please
    runs-on: ${{ inputs.runs_on }}
    permissions:
      contents: write # Required to update changelog files.
      issues: write # Required to label issues.
      pull-requests: write # Required to create release PRs.
    steps:
      - name: Release Please
        id: release-please
        uses: googleapis/release-please-action@c2a5a2bd6a758a0937f1ddb1e8950609867ed15c
        with:
          config-file: release-please-config.json
          manifest-file: .release-please-manifest.json

      - name: Set path outputs
        id: set-path-outputs
        env:
          # The Release Please action dynamically defines outputs for each path
          # that had a release created. Dynamically defining outputs for a job
          # is not supported, so we have to convert the entire Release Please
          # action outputs object to a JSON string, then use jq to construct
          # static JSON objects containing the specific outputs that we need.
          # Ref: https://github.com/googleapis/release-please-action/blob/c2a5a2bd6a758a0937f1ddb1e8950609867ed15c/README.md#path-outputs
          OUTPUTS_JSON: ${{ toJSON(steps.release-please.outputs) }}
        run: |
          path_tag_names=$(echo "$OUTPUTS_JSON" | jq 'with_entries(select(.key | endswith("--tag_name")) | .key |= rtrimstr("--tag_name"))')
          echo "path_tag_names=$path_tag_names" >> "$GITHUB_OUTPUT"

    outputs:
      # Value is `true` if any release was created, else `false`.
      releases_created: ${{ steps.release-please.outputs.releases_created }}

      # Value is a JSON array of paths that had releases created, `[]` if
      # nothing was released.
      paths_released: ${{ steps.release-please.outputs.paths_released }}

      # Value is `true` if a release was created for the root package (path
      # is `.`), else `false`.
      release_created: ${{ steps.release-please.outputs.release_created }}

      # Value is the tag name that was created for the root package, empty if
      # a release was not created for the root package.
      tag_name: ${{ steps.release-please.outputs.tag_name }}

      # Value is a JSON object of key-value pairs, where the key is a path that
      # had a release created, and the value is the tag name that was created
      # for that release.
      path_tag_names: ${{ steps.set-path-outputs.outputs.path_tag_names }}

  python:
    name: Python
    needs: release-please
    if: needs.release-please.outputs.releases_created == 'true'
    strategy:
      matrix:
        path: ${{ fromJSON(needs.release-please.outputs.paths_released) }}
    runs-on: ${{ inputs.runs_on }}
    environment: ${{ inputs.environment }}
    permissions:
      # Read permission required to checkout the repository.
      # Write permission required to upload the release artifact.
      contents: write
    defaults:
      run:
        shell: bash
        working-directory: ${{ matrix.path }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          persist-credentials: false

      - name: Setup Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version-file: .python-version

      - name: Install dependecies
        run: python -m pip install --upgrade pip build

      - name: Generate distributions
        # The build command will generate a source distribution (`.tar.gz` file)
        # and a built distribution (`.whl` file) in the `dist` directory.
        # Ref: https://packaging.python.org/en/latest/tutorials/packaging-projects/#generating-distribution-archives
        run: python -m build

      # Attach distributions to the GitHub release.
      # Ref: https://github.com/googleapis/release-please-action/blob/c2a5a2bd6a758a0937f1ddb1e8950609867ed15c/README.md#attaching-files-to-the-github-release
      - name: Upload release artifacts
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_CREATED: ${{ needs.release-please.outputs.release_created }}
          MATRIX_PATH: ${{ matrix.path }}
          TAG_NAME: ${{ needs.release-please.outputs.tag_name }}
          PATH_TAG_NAME: ${{ fromJSON(needs.release-please.outputs.path_tag_names)[matrix.path] }}
        run: |
          if [[ "$RELEASE_CREATED" == true ]] && [[ "$MATRIX_PATH" == "." ]]; then
            # Root package
            gh release upload "$TAG_NAME" dist/*
          else
            gh release upload "$PATH_TAG_NAME" dist/*
          fi
