# Login to Azure using OpenID Connect (OIDC), then deploy Docker image to Azure Web App.

on:
  workflow_call:
    inputs:
      environment:
        description: The name of the GitHub environment that this job references.
        type: string
        required: true

      image:
        description: The Docker image to deploy.
        type: string
        required: true

      app_name:
        description: The name of the Azure Web App to deploy the Docker image to.
        type: string
        required: true

      app_settings:
        description: The app settings to configure for the Azure Web App. Inline JSON or path of a JSON file.
        type: string
        default: "{}"
        required: false

    secrets:
      AZURE_CLIENT_ID:
        description: The client ID of the Azure AD service principal to use for authenticating to Azure.
        required: true

      AZURE_SUBSCRIPTION_ID:
        description: The ID of the Azure subscription to deploy the Docker image to.
        required: true

      AZURE_TENANT_ID:
        description: The ID of the Azure tenant to deploy the Docker image to.
        required: true

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
      url: ${{ steps.deploy.outputs.webapp-url }}

    # Set permissions required to login to Azure using OIDC.
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}

      - name: Deploy
        id: deploy
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ inputs.app_name }}
          images: ${{ inputs.image }}

      - name: Read app settings
        id: settings
        env:
          JSON: ${{ inputs.app_settings }}
        run: |
          if [[ -f "$JSON" ]]; then
            JSON=$(jq -c . "$JSON")
          fi
          echo "json=$JSON" >> "$GITHUB_OUTPUT"

      - name: Configure
        uses: azure/appservice-settings@v1
        with:
          app-name: ${{ inputs.app_name }}
          app-settings-json: ${{ steps.settings.outputs.json }}
          mask-inputs: false
          # Use Key Vault references instead of including and masking secrets directly in app settings JSON.
          # Docs: https://learn.microsoft.com/en-us/azure/app-service/app-service-key-vault-references
