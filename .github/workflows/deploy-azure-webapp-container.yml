# Login to Azure using OpenID Connect (OIDC), then deploy Docker image to Azure Web App.

# Set permissions granted to GITHUB_TOKEN in caller workflow:

# permissions:
#   id-token: write
#   contents: read

# Required when configuring OIDC authentication to Azure.

on:
  workflow_call:
    inputs:
      environment:
        description: The name of the GitHub environment that this job references.
        type: string
        required: true

      image:
        description: The Docker image to deploy.
        type: string
        required: true

      app_name:
        description: The name of the Azure Web App to deploy the Docker image to.
        type: string
        required: true

      app_settings_path:
        description: A path ...
        type: string
        required: false

    secrets:
      AZURE_CLIENT_ID:
        description: The client ID of the Azure AD service principal to use for authenticating to Azure.
        required: true

      AZURE_SUBSCRIPTION_ID:
        description: The ID of the Azure subscription to deploy the Docker image to.
        required: true

      AZURE_TENANT_ID:
        description: The ID of the Azure tenant to deploy the Docker image to.
        required: true

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
      url: ${{ steps.deploy.outputs.webapp-url }}

    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}

      - name: Deploy
        id: deploy
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ inputs.app_name }}
          images: ${{ inputs.image }}

        # TODO: simplify the rest of this

      - name: Parse app settings
        id: parse
        if: github.event_name == "workflow_call" && github.event.inputs.app_settings_path != ""
        env:
          APP_SETTINGS_PATH: ${{ inputs.app_settings_path }}
        run: |
          app_settings_json=$(jq -c '.' "$APP_SETTINGS_PATH")
          echo "app_settings_json=$app_settings_json" >> $GITHUB_OUTPUT

      - name: Configure app settings
        if: steps.parse.outputs.app_settings_json != ""
        uses: azure/appservice-settings@v1
        with:
          app-name: ${{ inputs.app_name }}
          app-settings-json: ${{ steps.parse.outputs.app_settings_json }}
