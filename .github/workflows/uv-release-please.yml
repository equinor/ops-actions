name: â™» uv-release-please

on:
  workflow_call:
    inputs:
      runs_on:
        description: The label of the runner (GitHub- or self-hosted) to run this workflow on. Defaults to `ubuntu-24.04`.
        type: string
        required: false
        default: ubuntu-24.04

      environment:
        description: The name of the GitHub environment that this workflow should use for publishing.
        type: string
        required: false

      uv_version:
        description: The version of uv to install.
        type: string
        required: false
        default: latest

permissions: {}

jobs:
  release-please:
    name: Release Please
    runs-on: ${{ inputs.runs_on }}
    permissions:
      contents: write # Required to update changelog files.
      pull-requests: write # Required to create release PRs.
    steps:
      - name: Release Please
        id: release-please
        uses: googleapis/release-please-action@c2a5a2bd6a758a0937f1ddb1e8950609867ed15c
        with:
          config-file: release-please-config.json
          manifest-file: .release-please-manifest.json
    outputs:
      # The Release Please action will always set the value of the following
      # outputs.
      # Ref: https://github.com/googleapis/release-please-action/blob/c2a5a2bd6a758a0937f1ddb1e8950609867ed15c/README.md#outputs
      releases_created: ${{ steps.release-please.outputs.releases_created }}
      paths_released: ${{ steps.release-please.outputs.paths_released }}

      # The Release Please action will set the value of the following outputs if
      # you have a root package (path is `.`).
      release_created: ${{ steps.release-please.outputs.release_created }}
      tag_name: ${{ steps.release-please.outputs.tag_name }}

      # The Release Please action dynamically defines outputs for each path that
      # had a release created. Dynamically defining outputs for a job is not
      # supported, so we have to convert the entire Release Please action
      # outputs object to a JSON string, then map that string to a single job
      # output. Dependent jobs can then get the JSON string from this output and
      # convert it back to an object, allowing the outputs for each path to be
      # accessed.
      json: ${{ toJSON(steps.release-please.outputs) }}

  uv:
    name: uv
    needs: release-please
    if: needs.release-please.outputs.releases_created == 'true'
    strategy:
      matrix:
        path: ${{ fromJSON(needs.release-please.outputs.paths_released) }}
    runs-on: ${{ inputs.runs_on }}
    environment: ${{ inputs.environment }}
    permissions:
      # Read permission required to checkout the repository.
      # Write permission required to upload the release artifact.
      contents: write
    defaults:
      run:
        shell: bash
        working-directory: ${{ matrix.path }}
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          persist-credentials: false

      # Install Python using the official action. This can be faster than
      # installing Python with the `uv python install` command, since GitHub
      # caches the Python versions alongside the runner.
      # Ref: https://docs.astral.sh/uv/guides/integration/github/#setting-up-python
      - name: Setup Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          # Use the pinned version for the project:
          python-version-file: .python-version

      - name: Setup uv
        uses: astral-sh/setup-uv@557e51de59eb14aaaba2ed9621916900a91d50c6
        with:
          version: ${{ inputs.uv_version }}

      - name: Install project
        run: uv sync

      - name: Build distributions
        # By default, the `uv build` command will build the project in the
        # working directory, and place the build artifacts in a `dist/` subdirectory.
        # Ref: https://docs.astral.sh/uv/concepts/projects/build/#using-uv-build
        run: uv build

      - name: Upload release artifacts
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_CREATED: ${{ needs.release-please.outputs.release_created }}
          MATRIX_PATH: ${{ matrix.path }}
          TAG_NAME: ${{ needs.release-please.outputs.tag_name }}
          PATH_TAG_NAME: ${{ fromJSON(needs.release-please.outputs.json)[format('{0}--tag_name', matrix.path)] }}
        run: |
          if [[ "$RELEASE_CREATED" == true ]] && [[ "$MATRIX_PATH" == "." ]]; then
            # Root package
            gh release upload "$TAG_NAME" dist/*
          else
            gh release_upload "$PATH_TAG_NAME" dist/*
          fi
