name: â™» terraform

on:
  workflow_call:
    inputs:
      environment:
        description: The environment that the job references.
        type: string
        required: true

      working_directory:
        description: The working directory to run the Terraform commands in.
        type: string
        required: false
        default: "."

      terraform_version:
        description: The version of Terraform to install.
        type: string
        required: false
        default: latest

      backend_config:
        description: The path, relative to the working directory, of a configuration file containing the remaining arguments for a partial backend configuration.
        type: string
        required: false
        default: ""
        # Ref: https://developer.hashicorp.com/terraform/language/settings/backends/configuration#partial-configuration

      artifact_name:
        description: The name of the artifact to upload. If not specified, an artifact name will be generated based on the environment name.
        type: string
        required: false
        default: ""

      runs_on:
        description: The label of the runner (GitHub- or self-hosted) to run this workflow on.
        type: string
        required: false
        default: ubuntu-latest

    secrets:
      AZURE_CLIENT_ID:
        description: The client ID of the Azure AD service principal to use for authenticating to Azure.
        required: true

      AZURE_SUBSCRIPTION_ID:
        description: The ID of the Azure subscription to create the resources in.
        required: true

      AZURE_TENANT_ID:
        description: The ID of the Azure tenant to create the resources in.
        required: true

      ENCRYPTION_PASSWORD:
        description: A password used to encrypt the archive containing the Terraform configuration and plan file.
        required: true

# Queue jobs that target the same Terraform configuration.
concurrency:
  group: terraform @ ${{ inputs.working_directory }}
  cancel-in-progress: false

permissions:
  # Set permissions required to login to Azure using OIDC.
  id-token: write
  contents: read

  # Set permission required to delete artifacts.
  actions: write

env:
  # Configure Terraform to run in automation.
  # Makes output more consistent and less confusing in workflows where users don't directly execute Terraform commands.
  TF_IN_AUTOMATION: true

  TF_CLI_ARGS_init: -backend-config=${{ inputs.backend_config }}

  # Configure OIDC authentication to Azure using environment variables.
  # Required by the AzureRM backend and provider.
  ARM_USE_OIDC: true
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

  ARTIFACT_NAME: ${{ inputs.artifact_name || format('terraform-{0}', inputs.environment) }}
  ENCRYPTION_PASSWORD: ${{ secrets.ENCRYPTION_PASSWORD }}

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ${{ inputs.runs_on }}
    environment: ${{ inputs.environment }}
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working_directory }}

    outputs:
      upload-outcome: ${{ steps.upload.outcome }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}
          terraform_wrapper: false
          # Wraps Terraform commands, exposing their stdout, stderr and exitcode.
          # It also wraps Terraform command outputs with debug logs, including the output of the "terraform show" command.
          # The "show" command is used to create a GitHub job summary containing the generated plan in a human-readable format.
          # If the wrapper is enabled, the debug logs will be visible in the job summary.
          # The wrapper must be disabled to prevent this.

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate

      # Create Terraform plan file.
      # This file contains the full configuration, including sensitive data.
      # As a result, it should be treated as a potentially-sensitive artifact.
      # Ref: https://developer.hashicorp.com/terraform/tutorials/automation/automate-terraform#plan-and-apply-on-different-machines
      - name: Terraform Plan
        id: plan
        # Start Bash without fail-fast behavior.
        # Required in order to check exitcode.
        # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#exit-codes-and-error-action-preference
        shell: bash {0}
        run: |
          terraform plan -input=false -out=tfplan -detailed-exitcode
          exitcode=$?
          if [[ "$exitcode" == 1 ]]; then
            exit "$exitcode"
          fi
          echo "exitcode=$exitcode" >> "$GITHUB_OUTPUT"

      # Some plans are too large to be stored in environment variables or step outputs, resulting in an error.
      # To bypass this, the plan must be explicitly read during this step using the "terraform show" command.
      - name: Create job summary
        if: success() || failure()
        shell: bash {0}
        env:
          TF_FMT_OUTCOME: ${{ steps.fmt.outcome }}
          TF_INIT_OUTCOME: ${{ steps.init.outcome }}
          TF_VALIDATE_OUTCOME: ${{ steps.validate.outcome }}
          TF_PLAN_OUTCOME: ${{ steps.plan.outcome }}
          WORKING_DIRECTORY: ${{ inputs.working_directory }}
        run: |
          tfplan=$(terraform show tfplan -no-color)

          echo "#### Terraform Format and Style ðŸ–Œ\`$TF_FMT_OUTCOME\`
          #### Terraform Initialization âš™\`$TF_INIT_OUTCOME\`
          #### Terraform Validation ðŸ¤–\`$TF_VALIDATE_OUTCOME\`
          #### Terraform Plan ðŸ“–\`$TF_PLAN_OUTCOME\`

          <details><summary>Show Plan</summary>

          \`\`\`terraform
          $tfplan
          \`\`\`

          </details>

          *Pusher: @$GITHUB_ACTOR, Action: \`$GITHUB_EVENT_NAME\`, Working Directory: \`$WORKING_DIRECTORY\`, Workflow: \`$GITHUB_WORKFLOW\`*" >> "$GITHUB_STEP_SUMMARY"

      - name: Archive Terraform config
        id: archive
        # Only run if Terraform Plan succeeded with non-empty diff (changes present).
        # Ref: https://developer.hashicorp.com/terraform/cli/commands/plan#detailed-exitcode
        if: steps.plan.outputs.exitcode == 2
        run: |
          tar -cf terraform.tar .
          7z a -mx=1 -p"$ENCRYPTION_PASSWORD" terraform.tar.7z terraform.tar
        # When running 7-Zip, set "-mx=1" for fastest level of compression, to ensure that this step runs as fast as possible.
        # Could set "-mx=0" for no compression, but that would result in a much larger file size for the created archive file.

      - name: Upload artifact
        id: upload
        if: steps.archive.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ inputs.working_directory }}/terraform.tar.7z
          if-no-files-found: error
          # Automatically delete artifact after the workflow run time limit (35 days) to save storage space.
          # If a workflow reaches this limit, it will be cancelled and the artifact will no longer be needed.
          # Ref: https://docs.github.com/en/actions/learn-github-actions/usage-limits-billing-and-administration#usage-limits
          retention-days: 35

  terraform-apply:
    name: Terraform Apply
    needs: terraform-plan
    if: needs.terraform-plan.outputs.upload-outcome == 'success'
    runs-on: ${{ inputs.runs_on }}
    environment: ${{ inputs.environment }}
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working_directory }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ inputs.working_directory }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - name: Extract Terraform config
        run: |
          7z x -p"$ENCRYPTION_PASSWORD" terraform.tar.7z
          tar -xf terraform.tar

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false tfplan

      # Once the Terraform plan file has been applied, the artifact is no longer needed.
      # Delete it to save storage space.
      - name: Delete artifact
        uses: GeekyEggo/delete-artifact@65041433121f7239077fa20be14c0690f70569de
        with:
          name: ${{ env.ARTIFACT_NAME }}
