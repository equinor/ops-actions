on:
  workflow_call:
    inputs:
      environment:
        description: The environment that the job references.
        type: string
        required: true

      working_directory:
        description: The working directory to run the Terraform commands in.
        type: string
        required: false
        default: "."

      terraform_version:
        description: The version of Terraform to install.
        type: string
        required: false
        default: latest

      artifact_name:
        description: The name of the artifact to upload.
        type: string
        required: false
        default: terraform

    secrets:
      AZURE_CLIENT_ID:
        description: The client ID of the Azure AD service principal to use for authenticating to Azure.
        required: true

      AZURE_SUBSCRIPTION_ID:
        description: The ID of the Azure subscription to create the resources in.
        required: true

      AZURE_TENANT_ID:
        description: The ID of the Azure tenant to create the resources in.
        required: true

      ENCRYPTION_PASSWORD:
        description: A password used to encrypt the archive containing the Terraform configuration and plan file.
        required: true

# Queue jobs that target the same Terraform configuration.
concurrency:
  group: terraform @ ${{ inputs.working_directory }}
  cancel-in-progress: false

# Set permissions required to login to Azure using OIDC.
permissions:
  id-token: write
  contents: read

env:
  # Configure Terraform to run in automation.
  # Makes output more consistent and less confusing in workflows where users don't directly execute Terraform commands.
  TF_IN_AUTOMATION: true

  # Configure OIDC authentication to Azure using environment variables.
  # Required by the AzureRM backend and provider.
  ARM_USE_OIDC: true
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

  ENCRYPTION_PASSWORD: ${{ secrets.ENCRYPTION_PASSWORD }}

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest

    # Run Terraform Plan in a separate "no operation" (noop) environment.
    # This allows Terraform Plan to run without requiring a manual approval.
    environment: ${{ inputs.environment }}-noop

    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working_directory }}

    outputs:
      upload-outcome: ${{ steps.upload.outcome }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      # Create Terraform plan file.
      # This file contains the full configuration, including sensitive data.
      # As a result, it should be treated as a potentially-sensitive artifact.
      # Ref: https://developer.hashicorp.com/terraform/tutorials/automation/automate-terraform#plan-and-apply-on-different-machines
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -out=tfplan -detailed-exitcode

      - name: Create job summary
        if: success() || failure()
        env:
          TF_FMT_OUTCOME: ${{ steps.fmt.outcome }}
          TF_INIT_OUTCOME: ${{ steps.init.outcome }}
          TF_VALIDATE_OUTCOME: ${{ steps.validate.outcome }}
          TF_PLAN_OUTCOME: ${{ steps.plan.outcome }}
          TF_PLAN: ${{ steps.plan.outputs.stdout }}
          WORKING_DIRECTORY: ${{ inputs.working_directory }}
        run: |
          echo "#### Terraform Format and Style ðŸ–Œ\`$TF_FMT_OUTCOME\`
          #### Terraform Initialization âš™\`$TF_INIT_OUTCOME\`
          #### Terraform Validation ðŸ¤–\`$TF_VALIDATE_OUTCOME\`
          #### Terraform Plan ðŸ“–\`$TF_PLAN_OUTCOME\`

          <details><summary>Show Plan</summary>

          \`\`\`terraform
          $TF_PLAN
          \`\`\`

          </details>

          *Pusher: @$GITHUB_ACTOR, Action: \`$GITHUB_EVENT_NAME\`, Working Directory: \`$WORKING_DIRECTORY\`, Workflow: \`$GITHUB_WORKFLOW\`*" >> "$GITHUB_STEP_SUMMARY"

      - name: Archive Terraform config
        id: archive
        # Only run if Terraform Plan succeeded with non-empty diff (changes present).
        # Ref: https://developer.hashicorp.com/terraform/cli/commands/plan#detailed-exitcode
        if: steps.plan.outputs.exitcode == 2
        run: |
          tar -cf terraform.tar .
          7z a -p"$ENCRYPTION_PASSWORD" terraform.tar.7z terraform.tar

      - name: Upload artifact
        id: upload
        if: steps.archive.outcome == 'success'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.artifact_name }}
          path: ${{ inputs.working_directory }}/terraform.tar.7z
          if-no-files-found: error

  terraform:
    name: Terraform
    needs: terraform-plan
    if: needs.terraform-plan.outputs.upload-outcome == 'success'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working_directory }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.artifact_name }}
          path: ${{ inputs.working_directory }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - name: Extract Terraform config
        run: |
          7z x -p"$ENCRYPTION_PASSWORD" terraform.tar.7z
          tar -xf terraform.tar

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false tfplan
