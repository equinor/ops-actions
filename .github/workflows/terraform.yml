# Install Terraform, configure OpenID Connect (OIDC) authentication to Azure, create a Terraform plan, and apply the plan on push to branch 'main'.

on:
  workflow_call:
    inputs:
      environment:
        description: The environment that the job references.
        type: string
        required: true

      working_directory:
        description: The working directory to run the Terraform commands in.
        type: string
        required: false
        default: "."

      terraform_version:
        description: The version of Terraform to install.
        type: string
        required: false
        default: latest

      checkov_skip_check:
        description: A comma-separated string of Checkov check identifiers to skip.
        type: string
        required: false
        default: ""

    secrets:
      AZURE_CLIENT_ID:
        description: The client ID of the Azure AD service principal to use for authenticating to Azure.
        required: true

      AZURE_SUBSCRIPTION_ID:
        description: The ID of the Azure subscription to create the resources in.
        required: true

      AZURE_TENANT_ID:
        description: The ID of the Azure tenant to create the resources in.
        required: true

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    # Queue jobs that target the same Terraform configuration.
    concurrency:
      group: terraform @ ${{ inputs.working_directory }}
      cancel-in-progress: false

    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working_directory }}

    # Configure OIDC authentication to Azure using environment variables.
    # Required by the AzureRM backend and provider.
    env:
      ARM_USE_OIDC: true
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Format
        id: fmt
        if: github.ref != 'refs/heads/main'
        run: terraform fmt -check

      - name: Terraform Validate
        id: validate
        if: github.ref != 'refs/heads/main' && (success() || failure())
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color

      # Run Checkov to perform static security analysis of Terraform configuration.
      - name: Checkov
        if: github.event_name == 'pull_request'
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: ${{ inputs.working_directory }}
          framework: terraform
          download_external_modules: true
          skip_check: ${{ inputs.checkov_skip_check }}
          quiet: true
          output_format: github_failed_only

      # Create pull request comment with plan and Checkov results.
      - name: Create PR comment
        if: github.event_name == 'pull_request' && (success() || failure())
        uses: actions/github-script@v6
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Checkov üß™\`${{ steps.checkov.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`${process.env.PLAN}\`\`\`

            </details>

            <details><summary>Show Checkov Results</summary>

            ${process.env.CHECKOV_RESULTS}

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Apply
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'schedule'
        run: terraform apply -auto-approve
