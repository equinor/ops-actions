# Install Terraform, configure OpenID Connect (OIDC) authentication to Azure, create a Terraform plan, and apply the plan on push to branch 'main'.

on:
  workflow_call:
    inputs:
      environment:
        description: The environment that the job references.
        type: string
        required: false

      working_directory:
        description: The working directory to run the Terraform commands in.
        type: string
        required: false
        default: "."

      terraform_version:
        description: The version of Terraform to install.
        type: string
        required: false
        default: latest

    secrets:
      AZURE_CLIENT_ID:
        description: The client ID of the Azure AD service principal to use for authenticating to Azure.
        required: true

      AZURE_SUBSCRIPTION_ID:
        description: The ID of the Azure subscription to create the resources in.
        required: true

      AZURE_TENANT_ID:
        description: The ID of the Azure tenant to create the resources in.
        required: true

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    # Queue jobs that target the same Terraform configuration.
    concurrency:
      group: terraform @ ${{ inputs.working_directory }}
      cancel-in-progress: false

    permissions:
      # Set permissions required to login to Azure using OIDC.
      id-token: write
      contents: read

      # Set permissions required to create PR comment.
      pull-requests: write

    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working_directory }}

    env:
      # Configure Terraform to run in automation.
      # Makes output more consistent and less confusing in workflows where users don't directly execute Terraform commands.
      TF_IN_AUTOMATION: true

      # Configure OIDC authentication to Azure using environment variables.
      # Required by the AzureRM backend and provider.
      ARM_USE_OIDC: true
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false

      - name: Create PR comment
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request' && (success() || failure())
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('<!-- terraform @ ${{ inputs.working_directory }} -->')
            })

            // 2. Prepare format of the comment
            const output = `<!-- terraform @ ${{ inputs.working_directory }} -->
            #### Terraform Format and Style :paintbrush:\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization :gear:\`${{ steps.init.outcome }}\`
            #### Terraform Validation :robot:\`${{ steps.validate.outcome }}\`
            #### Terraform Plan :book:\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.working_directory }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: Terraform Apply
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'schedule'
        run: terraform apply -auto-approve -input=false
