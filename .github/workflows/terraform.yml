# Reusable GitHub Actions workflow to provision cloud infrastructure using HashiCorp Terraform.
#
# Features:
#   - Authenticate to Azure using a service principal with OpenID Connect (OIDC).
#   - Queue concurrent jobs that target the same Terraform state file.
#   - Cache Terraform provider plugins.
#   - Create job summary containing Terraform command outcomes and plan.

name: â™» terraform

on:
  workflow_call:
    inputs:
      runs_on:
        description: The label of the runner (GitHub- or self-hosted) to run this workflow on. Defaults to `ubuntu-24.04`.
        type: string
        required: false
        default: ubuntu-24.04

      environment:
        description: The environment that the jobs reference.
        type: string
        required: true

      terraform_version:
        description: The version of Terraform to install.
        type: string
        required: false
        default: latest

      working_directory:
        description: The working directory to run the Terraform commands in.
        type: string
        required: false
        default: "."

      backend_config:
        description: The path, relative to the working directory, of a configuration file (`.tfbackend`) containing the remaining arguments for a partial backend configuration.
        type: string
        required: false

      var_file:
        description: The path, relative to the working directory, of a variable definitions file (`.tfvars`) containing values for variables declared in the root module.
        type: string
        required: false

      artifact_name:
        description: The name of the artifact to upload. If not specified, an artifact name will be generated based on the environment name.
        type: string
        required: false

      run_terraform_apply:
        description: Run `terraform apply` for the saved plan file?
        type: boolean
        required: false
        default: true

    secrets:
      AZURE_CLIENT_ID:
        description: The client ID of the service principal to use for authenticating to Azure.
        required: false

      AZURE_SUBSCRIPTION_ID:
        description: The ID of the Azure subscription to authenticate to.
        required: false

      AZURE_TENANT_ID:
        description: The ID of the Microsoft Entra tenant to authenticate to.
        required: false

      GRAFANA_AUTH:
        description: A service account token to use for authenticating to Grafana.
        required: false

      ENCRYPTION_PASSWORD:
        description: A password used to encrypt the archive containing the Terraform configuration and plan file.
        required: true

# Queue jobs that target the same state file, i.e. the same working directory and backend configuration.
concurrency:
  group: terraform-${{ inputs.working_directory }}-${{ inputs.backend_config }}
  cancel-in-progress: false

permissions: {}

env:
  # Configure Terraform to run in automation.
  # Makes output more consistent and less confusing in workflows where users don't directly execute Terraform commands.
  # Ref: https://developer.hashicorp.com/terraform/tutorials/automation/automate-terraform#controlling-terraform-output-in-automation
  TF_IN_AUTOMATION: true

  # Authenticate to Azure using a service principal with OpenID Connect (OIDC).
  # Ref: https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/guides/service_principal_oidc#configuring-the-service-principal-in-terraform
  ARM_USE_OIDC: true
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

  # Authenticate to Grafana using a service account token.
  # Ref: https://registry.terraform.io/providers/grafana/grafana/latest/docs#authentication
  GRAFANA_AUTH: ${{ secrets.GRAFANA_AUTH }}

  LOCK_FILE: .terraform.lock.hcl
  PLAN_FILE: tfplan
  TARBALL: terraform.tar.gpg
  ARTIFACT_NAME: ${{ inputs.artifact_name || format('terraform-{0}', inputs.environment) }}
  ENCRYPTION_PASSWORD: ${{ secrets.ENCRYPTION_PASSWORD }}

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ${{ inputs.runs_on }}
    environment: ${{ inputs.environment }}
    permissions:
      contents: read # Required to checkout the repository
      id-token: write # Required to authenticate to Azure with OIDC
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working_directory }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd
        with:
          terraform_version: ${{ inputs.terraform_version }}
          terraform_wrapper: false
          # Wraps Terraform commands, exposing their stdout, stderr and exitcode.
          # It also wraps Terraform command outputs with debug logs, including the output of the "terraform show" command.
          # The "show" command is used to create a GitHub job summary containing the generated plan in a human-readable format.
          # If the wrapper is enabled, the debug logs will be visible in the job summary.
          # The wrapper must be disabled to prevent this.

      # Ref: https://developer.hashicorp.com/terraform/cli/config/config-file#provider-plugin-cache
      - name: Enable Terraform plugin cache
        id: mkdir
        run: |
          plugin_cache_dir=""
          if [[ -f "$LOCK_FILE" ]]; then
            plugin_cache_dir="$HOME/.terraform.d/plugin-cache"
            mkdir --parents "$plugin_cache_dir"
            echo "TF_PLUGIN_CACHE_DIR=$plugin_cache_dir" >> "$GITHUB_ENV"
            echo "Terraform plugin cache enabled."
          else
            echo "Dependency lock file not found. Terraform plugin cache will not be enabled."
          fi
          echo "plugin-cache-dir=$plugin_cache_dir" >> "$GITHUB_OUTPUT"

      - name: Restore cache
        id: cache-restore
        if: steps.mkdir.outputs.plugin-cache-dir != ''
        uses: actions/cache/restore@0400d5f644dc74513175e3cd8d07132dd4860809
        with:
          path: ${{ steps.mkdir.outputs.plugin-cache-dir }}
          key: ${{ runner.os }}-terraform-${{ hashFiles(format('{0}/{1}', inputs.working_directory, env.LOCK_FILE)) }}
          # The dependency lock file tracks provider dependencies for the Terraform configuration in the working directory.
          # Calculate a hash for the dependency lock file and use this hash to identify the plugin cache for the Terraform configuration.
          # Ref: https://developer.hashicorp.com/terraform/language/files/dependency-lock

      - name: Terraform Format
        id: fmt
        # Start Bash without fail-fast behavior.
        # Required in order to check exitcode.
        # Ref: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#exit-codes-and-error-action-preference
        shell: bash {0}
        continue-on-error: true # Formatting errors should not prevent the job from running.
        run: |
          terraform fmt -check
          exitcode=$?
          echo "exitcode=$exitcode" >> "$GITHUB_OUTPUT"
          exit "$exitcode"

      - name: Terraform Init
        id: init
        env:
          BACKEND_CONFIG: ${{ inputs.backend_config }}
        run: |
          optional_args=()
          if [[ "$GITHUB_ACTOR" == "dependabot[bot]" ]]; then
            optional_args+=(-backend=false)
          elif [[ -n "$BACKEND_CONFIG" ]]; then
            optional_args+=(-backend-config="$BACKEND_CONFIG")
          fi
          terraform init -input=false "${optional_args[@]}"

      - name: Terraform Validate
        id: validate
        run: terraform validate

      # Create Terraform plan file.
      # This file contains the full configuration, including sensitive data.
      # As a result, it should be treated as a potentially-sensitive artifact.
      # Ref: https://developer.hashicorp.com/terraform/tutorials/automation/automate-terraform#plan-and-apply-on-different-machines
      - name: Terraform Plan
        id: plan
        if: github.actor != 'dependabot[bot]'
        # Start Bash without fail-fast behavior.
        # Required in order to check exitcode.
        # Ref: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#exit-codes-and-error-action-preference
        shell: bash {0}
        env:
          VAR_FILE: ${{ inputs.var_file }}
        run: |
          optional_args=()
          if [[ -n "$VAR_FILE" ]]; then
            optional_args+=(-var-file="$VAR_FILE")
          fi
          terraform plan -out="$PLAN_FILE" -input=false -detailed-exitcode "${optional_args[@]}"
          exitcode=$?
          if [[ "$exitcode" == 1 ]]; then
            exit "$exitcode"
          fi
          echo "exitcode=$exitcode" >> "$GITHUB_OUTPUT"

      - name: Create tarball
        id: tar
        # Only run if Terraform Plan succeeded with non-empty diff (changes present).
        if: steps.plan.outputs.exitcode == 2
        run: |
          tarball_path="$RUNNER_TEMP/$TARBALL"
          tar --create . | gpg --symmetric --batch --passphrase "$ENCRYPTION_PASSWORD" --output "$tarball_path"
          echo "tarball_path=$tarball_path" >> "$GITHUB_OUTPUT"

      - name: Upload artifact
        id: upload
        if: steps.tar.outcome == 'success'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ steps.tar.outputs.tarball_path }}
          if-no-files-found: error
          # Automatically delete artifact after the workflow run time limit (35 days) to save storage space.
          # If a workflow reaches this limit, it will be cancelled and the artifact will no longer be needed.
          # Ref: https://docs.github.com/en/actions/learn-github-actions/usage-limits-billing-and-administration#usage-limits
          retention-days: 35

      - name: Save cache
        id: cache-save
        if: steps.cache-restore.outcome == 'success' && steps.cache-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@0400d5f644dc74513175e3cd8d07132dd4860809
        with:
          path: ${{ steps.mkdir.outputs.plugin-cache-dir }}
          key: ${{ steps.cache-restore.outputs.cache-primary-key }}

      - name: Create job summary
        # Only run if Terraform Plan succeeded with non-empty diff (changes present).
        # Ref: https://developer.hashicorp.com/terraform/cli/commands/plan#detailed-exitcode
        if: steps.fmt.outputs.exitcode != 0 || steps.plan.outputs.exitcode == 2
        shell: bash {0}
        env:
          TF_FMT_OUTCOME: ${{ steps.fmt.outcome }}
          TF_INIT_OUTCOME: ${{ steps.init.outcome }}
          TF_VALIDATE_OUTCOME: ${{ steps.validate.outcome }}
          TF_PLAN_OUTCOME: ${{ steps.plan.outcome }}
          WORKING_DIRECTORY: ${{ inputs.working_directory }}
        # Some plans are too large to be stored in environment variables or step outputs, resulting in an error.
        # To bypass this, the plan must be explicitly read during this step using the "terraform show" command.
        run: |
          tfplan=$(terraform show "$PLAN_FILE" -no-color)

          echo "#### Terraform Format and Style ðŸ–Œ\`$TF_FMT_OUTCOME\`
          #### Terraform Initialization âš™\`$TF_INIT_OUTCOME\`
          #### Terraform Validation ðŸ¤–\`$TF_VALIDATE_OUTCOME\`
          #### Terraform Plan ðŸ“–\`$TF_PLAN_OUTCOME\`

          <details><summary>Show Plan</summary>

          \`\`\`terraform
          $tfplan
          \`\`\`

          </details>

          *Pusher: @$GITHUB_ACTOR, Action: \`$GITHUB_EVENT_NAME\`, Working Directory: \`$WORKING_DIRECTORY\`, Workflow: \`$GITHUB_WORKFLOW\`*" >> "$GITHUB_STEP_SUMMARY"

    outputs:
      upload-outcome: ${{ steps.upload.outcome }}
      artifact-id: ${{ steps.upload.outputs.artifact-id }}
      plugin-cache-dir: ${{ steps.mkdir.outputs.plugin-cache-dir }}
      cache-primary-key: ${{ steps.cache-restore.outputs.cache-primary-key }}
      cache-restore-hit: ${{ steps.cache-restore.outputs.cache-hit }}
      cache-save-outcome: ${{ steps.cache-save.outcome }}

  terraform-apply:
    name: Terraform Apply
    needs: terraform-plan
    if: needs.terraform-plan.outputs.upload-outcome == 'success' && inputs.run_terraform_apply
    runs-on: ${{ inputs.runs_on }}
    environment: ${{ inputs.environment }}
    permissions:
      contents: read # Required to checkout the repository
      id-token: write # Required to authenticate to Azure with OIDC
      actions: write # Required to delete the artifact
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working_directory }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Download artifact
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ inputs.working_directory }}

      - name: Restore cache
        if: needs.terraform-plan.outputs.cache-restore-hit == 'true' || needs.terraform-plan.outputs.cache-save-outcome == 'success'
        uses: actions/cache/restore@0400d5f644dc74513175e3cd8d07132dd4860809
        with:
          path: ${{ needs.terraform-plan.outputs.plugin-cache-dir }}
          key: ${{ needs.terraform-plan.outputs.cache-primary-key }}
          fail-on-cache-miss: true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd
        with:
          terraform_version: ${{ inputs.terraform_version }}
          terraform_wrapper: false

      - name: Extract tarball
        run: |
          gpg --decrypt --batch --passphrase "$ENCRYPTION_PASSWORD" "$TARBALL" | tar --extract
          rm "$TARBALL"

      - name: Terraform Apply
        run: terraform apply -input=false "$PLAN_FILE"

      # Once the Terraform plan file has been applied, the artifact is no longer needed.
      # Delete it to save storage space.
      # There is currently no official action to do this, so we use the GitHub CLI instead.
      - name: Delete artifact
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ARTIFACT_ID: ${{ needs.terraform-plan.outputs.artifact-id }}
        run: |
          gh api --method DELETE "/repos/$GITHUB_REPOSITORY/actions/artifacts/$ARTIFACT_ID" 1>/dev/null
          echo "Deleted artifact $ARTIFACT_NAME ($ARTIFACT_ID)"
