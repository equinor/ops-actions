name: â™» terraform

on:
  workflow_call:
    inputs:
      runs_on:
        description: The label of the runner (GitHub- or self-hosted) to run this workflow on.
        type: string
        required: false
        default: ubuntu-latest

      environment:
        description: The environment that the jobs reference.
        type: string
        required: true

      terraform_version:
        description: The version of Terraform to install.
        type: string
        required: false
        default: latest

      working_directory:
        description: The working directory to run the Terraform commands in.
        type: string
        required: false
        default: "."

      backend_config:
        description: The path, relative to the working directory, of a configuration file (`.tfbackend`) containing the remaining arguments for a partial backend configuration.
        type: string
        required: false

      var_file:
        description: The path, relative to the working directory, of a variable definitions file (`.tfvars`) containing values for variables declared in the root module.
        type: string
        required: false

      artifact_name:
        description: The name of the artifact to upload. If not specified, an artifact name will be generated based on the environment name.
        type: string
        required: false

      run_terraform_apply:
        description: Run `terraform apply` for the saved plan file?
        type: boolean
        required: false
        default: true

    secrets:
      AZURE_CLIENT_ID:
        description: The client ID of the Azure AD service principal to use for authenticating to Azure.
        required: true

      AZURE_SUBSCRIPTION_ID:
        description: The ID of the Azure subscription to create the resources in.
        required: true

      AZURE_TENANT_ID:
        description: The ID of the Azure tenant to create the resources in.
        required: true

      ENCRYPTION_PASSWORD:
        description: A password used to encrypt the archive containing the Terraform configuration and plan file.
        required: true

# Queue jobs that target the same Terraform configuration.
concurrency:
  group: terraform @ ${{ inputs.working_directory }}
  cancel-in-progress: false

permissions: {}

env:
  # Configure Terraform to run in automation.
  # Makes output more consistent and less confusing in workflows where users don't directly execute Terraform commands.
  TF_IN_AUTOMATION: true

  TF_CLI_ARGS_init: -backend-config=${{ inputs.backend_config }}
  TF_PLUGIN_CACHE_DIR: ${{ github.workspace }}/${{ inputs.working_directory }}/.terraform.d/plugin-cache

  # Configure OIDC authentication to Azure using environment variables.
  # Required by the AzureRM backend and provider.
  ARM_USE_OIDC: true
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

  TFPLAN_FILE: tfplan
  ARTIFACT_NAME: ${{ inputs.artifact_name || format('terraform-{0}', inputs.environment) }}
  ENCRYPTION_PASSWORD: ${{ secrets.ENCRYPTION_PASSWORD }}

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ${{ inputs.runs_on }}
    if: github.actor != 'dependabot[bot]'
    environment: ${{ inputs.environment }}
    permissions:
      contents: read # Required to checkout the repository
      id-token: write # Required to login to Azure using OIDC

    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working_directory }}

    outputs:
      upload-outcome: ${{ steps.upload.outcome }}
      artifact-id: ${{ steps.upload.outputs.artifact-id }}

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd
        with:
          terraform_version: ${{ inputs.terraform_version }}
          terraform_wrapper: false
          # Wraps Terraform commands, exposing their stdout, stderr and exitcode.
          # It also wraps Terraform command outputs with debug logs, including the output of the "terraform show" command.
          # The "show" command is used to create a GitHub job summary containing the generated plan in a human-readable format.
          # If the wrapper is enabled, the debug logs will be visible in the job summary.
          # The wrapper must be disabled to prevent this.

      - name: Create Terraform plugin cache
        run: mkdir --parents "$TF_PLUGIN_CACHE_DIR"

      - name: Cache Terraform plugins
        uses: actions/cache@v4
        with:
          path: ${{ env.TF_PLUGIN_CACHE_DIR }}
          key: ${{ runner.os }}-terraform-${{ hashFiles(format('{0}/.terraform.lock.hcl', inputs.working_directory)) }}
          restore-keys: ${{ runner.os }}-terraform-

      - name: Terraform Format
        id: fmt
        # Start Bash without fail-fast behavior.
        # Required in order to check exitcode.
        # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#exit-codes-and-error-action-preference
        shell: bash {0}
        continue-on-error: true # Formatting errors should not prevent the job from running.
        run: |
          terraform fmt -check
          exitcode=$?
          echo "exitcode=$exitcode" >> "$GITHUB_OUTPUT"
          exit "$exitcode"

      - name: Terraform Init
        id: init
        env:
          TFBACKEND_CONFIG: ${{ inputs.backend_config }}
        run: |
          optional_args=()
          if [[ -n "$TFBACKEND_CONFIG" ]]; then
            optional_args+=(-backend-config="$TFBACKEND_CONFIG")
          fi
          terraform init "${optional_args[@]}"

      - name: Terraform Validate
        id: validate
        run: terraform validate

      # Create Terraform plan file.
      # This file contains the full configuration, including sensitive data.
      # As a result, it should be treated as a potentially-sensitive artifact.
      # Ref: https://developer.hashicorp.com/terraform/tutorials/automation/automate-terraform#plan-and-apply-on-different-machines
      - name: Terraform Plan
        id: plan
        # Start Bash without fail-fast behavior.
        # Required in order to check exitcode.
        # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#exit-codes-and-error-action-preference
        shell: bash {0}
        env:
          TFVARS_FILE: ${{ inputs.var_file }}
        run: |
          optional_args=()
          if [[ -n "$TFVARS_FILE" ]]; then
            optional_args+=(-var-file="$TFVARS_FILE")
          fi
          terraform plan -input=false -out="$TFPLAN_FILE" -detailed-exitcode "${optional_args[@]}"
          exitcode=$?
          if [[ "$exitcode" == 1 ]]; then
            exit "$exitcode"
          fi
          echo "exitcode=$exitcode" >> "$GITHUB_OUTPUT"

      # Some plans are too large to be stored in environment variables or step outputs, resulting in an error.
      # To bypass this, the plan must be explicitly read during this step using the "terraform show" command.
      - name: Create job summary
        # Only run if Terraform Plan succeeded with non-empty diff (changes present).
        # Ref: https://developer.hashicorp.com/terraform/cli/commands/plan#detailed-exitcode
        if: steps.fmt.outputs.exitcode != 0 || steps.plan.outputs.exitcode == 2
        shell: bash {0}
        env:
          TF_FMT_OUTCOME: ${{ steps.fmt.outcome }}
          TF_INIT_OUTCOME: ${{ steps.init.outcome }}
          TF_VALIDATE_OUTCOME: ${{ steps.validate.outcome }}
          TF_PLAN_OUTCOME: ${{ steps.plan.outcome }}
          WORKING_DIRECTORY: ${{ inputs.working_directory }}
        run: |
          tfplan=$(terraform show "$TFPLAN_FILE" -no-color)

          echo "#### Terraform Format and Style ðŸ–Œ\`$TF_FMT_OUTCOME\`
          #### Terraform Initialization âš™\`$TF_INIT_OUTCOME\`
          #### Terraform Validation ðŸ¤–\`$TF_VALIDATE_OUTCOME\`
          #### Terraform Plan ðŸ“–\`$TF_PLAN_OUTCOME\`

          <details><summary>Show Plan</summary>

          \`\`\`terraform
          $tfplan
          \`\`\`

          </details>

          *Pusher: @$GITHUB_ACTOR, Action: \`$GITHUB_EVENT_NAME\`, Working Directory: \`$WORKING_DIRECTORY\`, Workflow: \`$GITHUB_WORKFLOW\`*" >> "$GITHUB_STEP_SUMMARY"

      - name: Create tarball
        id: tar
        # Only run if Terraform Plan succeeded with non-empty diff (changes present).
        if: steps.plan.outputs.exitcode == 2
        run: |
          tarball="$RUNNER_TEMP/$ARTIFACT_NAME.tar.gpg"
          tar -cv . | gpg -c --batch --passphrase "$ENCRYPTION_PASSWORD" -o "$tarball"
          echo "tarball=$tarball" >> "$GITHUB_OUTPUT"

      - name: Upload artifact
        id: upload
        if: steps.tar.outcome == 'success'
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ steps.tar.outputs.tarball }}
          if-no-files-found: error
          # Automatically delete artifact after the workflow run time limit (35 days) to save storage space.
          # If a workflow reaches this limit, it will be cancelled and the artifact will no longer be needed.
          # Ref: https://docs.github.com/en/actions/learn-github-actions/usage-limits-billing-and-administration#usage-limits
          retention-days: 35

  terraform-apply:
    name: Terraform Apply
    needs: terraform-plan
    if: github.actor != 'dependabot[bot]' && needs.terraform-plan.outputs.upload-outcome == 'success' && inputs.run_terraform_apply
    runs-on: ${{ inputs.runs_on }}
    environment: ${{ inputs.environment }}
    permissions:
      contents: read # Required to checkout the repository
      id-token: write # Required to login to Azure using OIDC
      actions: write # Required to delete the artifact

    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working_directory }}

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Download artifact
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ inputs.working_directory }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - name: Extract tarball
        run: |
          tarball="$ARTIFACT_NAME.tar.gpg"
          gpg -d --batch --passphrase "$ENCRYPTION_PASSWORD" "$tarball" | tar -xv
          rm "$tarball"

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false "$TFPLAN_FILE"

      # Once the Terraform plan file has been applied, the artifact is no longer needed.
      # Delete it to save storage space.
      # There is currently no official action to do this, so we use the GitHub CLI instead.
      - name: Delete artifact
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ARTIFACT_ID: ${{ needs.terraform-plan.outputs.artifact-id }}
        run: |
          gh api --method DELETE "/repos/$GITHUB_REPOSITORY/actions/artifacts/$ARTIFACT_ID" 1>/dev/null
          echo "Deleted artifact $ARTIFACT_NAME ($ARTIFACT_ID)"
