# Login to Azure Container Registry using OpenID Connect (OIDC), then build and push Docker image.

on:
  workflow_call:
    inputs:
      environment:
        description: The name of the GitHub environment that this job references.
        type: string
        required: true

      working_directory:
        description: The working directory to run the Docker commands in.
        type: string
        default: "."
        required: false

      registry_name:
        description: The name of the Azure Container Registry to push the Docker image to.
        type: string
        required: true

      repository:
        description: The repository in the Azure Container Registry to push the Docker image to.
        type: string
        required: true

    secrets:
      AZURE_CLIENT_ID:
        description: The client ID of the Azure AD service principal to use for authenticating to Azure.
        required: true

      AZURE_SUBSCRIPTION_ID:
        description: The ID of the Azure subscription containing the Container Registry.
        required: true

      AZURE_TENANT_ID:
        description: The ID of the Azure tenant containing the Container Registry.
        required: true

    outputs:
      image:
        description: The Docker image that was built.
        value: ${{ jobs.build.outputs.image }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}

    outputs:
      image: ${{ steps.build.outputs.image }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}

      - name: Login to ACR
        env:
          REGISTRY_NAME: ${{ inputs.registry_name }}
        run: az acr login --name "$REGISTRY_NAME"

      - name: Build and push
        id: build
        env:
          TAG_UNIQUE: ${{ inputs.registry_name }}.azurecr.io/${{ inputs.repository }}:${{ github.run_number }}
          TAG_LATEST: ${{ inputs.registry_name }}.azurecr.io/${{ inputs.repository }}:latest
        run: |
          docker build . -t "$TAG_UNIQUE" -t "$TAG_LATEST"
          docker push "$TAG_UNIQUE"
          docker push "$TAG_LATEST"
          echo "image=$TAG_UNIQUE" >> "$GITHUB_OUTPUT"
