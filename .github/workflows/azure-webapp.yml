# Login to Azure using OpenID Connect (OIDC), then deploy Docker image or package to Azure Web App.
name: â™» azure-webapp

on:
  workflow_call:
    inputs:
      environment:
        description: The name of the GitHub environment that this job references.
        type: string
        required: false

      image:
        description: The Docker image to deploy. Required if "artifact_name" is not set.
        type: string
        required: false

      artifact_name:
        description: The name of the artifact containing the package to deploy. Required if "image" is not set.
        type: string
        required: false

      app_name:
        description: The name of the Azure Web App to deploy the package or image to.
        type: string
        required: true

      slot_name:
        description: The name of the Azure Web App slot to deploy the package or image to.
        type: string
        required: false

      app_settings:
        description: An inline JSON object of app settings to configure for the Azure Web App.
        type: string
        required: false

      slot_settings:
        description: An inline JSON object of slot-specific app settings to configure for the Azure Web App.
        type: string
        required: false

    secrets:
      AZURE_CLIENT_ID:
        description: The client ID of the Azure AD service principal to use for authenticating to Azure.
        required: true

      AZURE_SUBSCRIPTION_ID:
        description: The ID of the Azure subscription containing the Azure Web App.
        required: true

      AZURE_TENANT_ID:
        description: The ID of the Azure tenant containing the Azure Web App.
        required: true

permissions: {}

jobs:
  azure-webapp:
    name: Azure Web App
    runs-on: ubuntu-latest # The steps for this job assume that OS is Ubuntu.
    if: github.actor != 'dependabot[bot]'
    environment:
      name: ${{ inputs.environment }}
      url: ${{ steps.deploy.outputs.webapp-url }}

    permissions:
      contents: read  # Required to checkout the repository
      id-token: write # Required to login to Azure using OIDC

    steps:
      - name: Download artifact
        if: inputs.artifact_name != ''
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16
        with:
          name: ${{ inputs.artifact_name }}

      - name: Extract tarball
        if: inputs.artifact_name != ''
        run: |
          tarball="$ARTIFACT_NAME.tar"
          tar -xvf "$tarball"
          rm "$tarball"

      - name: Login to Azure
        uses: azure/login@a65d910e8af852a8061c627c456678983e180302
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}

      - name: Deploy Web App
        id: deploy
        uses: azure/webapps-deploy@2fdd5c3ebb4e540834e86ecc1f6fdcd5539023ee
        with:
          app-name: ${{ inputs.app_name }}
          slot-name: ${{ inputs.slot_name }}
          images: ${{ inputs.image }}

      - name: Configure Web App
        if: inputs.app_settings != '' || inputs.slot_settings != ''
        env:
          APP_NAME: ${{ inputs.app_name }}
          SLOT_NAME: ${{ inputs.slot_name }}
          APP_SETTINGS: ${{ inputs.app_settings }}
          SLOT_SETTINGS: ${{ inputs.slot_settings }}
        run: |
          APP_ID=$(az webapp list --query "[?name=='$APP_NAME'].id" --output tsv)
          ARGS=(--settings "$APP_SETTINGS")
          if [[ -n "$SLOT_NAME" ]]; then
            ARGS+=(--slot "$SLOT_NAME" --slot-settings "$SLOT_SETTINGS")
          fi
          az webapp config appsettings set --ids "$APP_ID" "${ARGS[@]}" --output none
