# Restore, build and publish .NET Core application.

on:
  workflow_call:
    inputs:
      dotnet_version:
        description: The version of .NET to install.
        type: string
        required: true

      ci:
        description: Configure workflow to run in CI mode.
        type: boolean
        required: false
        default: true
        # Should be set to true in most cases.
        # Known exceptions:
        # - When set to true, NPM warnings are treated as errors. Set to false to prevent this behaviour.

      project:
        description: Specify the path of the project or solution file, or the path of the directory containing the project or solution file.
        type: string
        required: false
        default: "."

      runtime:
        description: Which runtime to publish the application for.
        type: string
        required: false
        default: ""

      self_contained:
        description: Publish the .NET runtime with your application so the runtime doesn't need to be installed on the target machine?
        type: boolean
        required: false
        default: false

      test_project:
        description: Specify the path of a test project or solution file, or the path of a directory containing a test project or solution file. Pass a newline-separated string to specify multiple test projects.
        type: string
        required: false
        default: ""

      test_collect:
        description: Enables data collector for the test run.
        type: string
        required: false
        default: ""

      artifact_name:
        description: The name of the build artifact to upload.
        type: string
        required: false
        default: dotnet-app

    outputs:
      artifact_name:
        description: The name of the uploaded artifact containing the application.
        value: ${{ inputs.artifact_name }}

jobs:
  dotnet:
    runs-on: ubuntu-latest
    env:
      CI: ${{ inputs.ci }}
      PROJECT: ${{ inputs.project }}
      CONFIGURATION: Release
      RUNTIME: ${{ inputs.runtime }}
      SELF_CONTAINED: ${{ inputs.self_contained }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup dotnet
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ inputs.dotnet_version }}

      # Restore dependencies for the application and runtime.
      - name: Dotnet restore
        run: dotnet restore "$PROJECT" --runtime "$RUNTIME"

      # Build the application for release/deployment.
      - name: Dotnet build
        run: dotnet build "$PROJECT" --configuration "$CONFIGURATION" --runtime "$RUNTIME" --self-contained "$SELF_CONTAINED" --no-restore

      # Execute unit tests.
      - name: Dotnet test
        if: inputs.test_project != ''
        env:
          PROJECT: ${{ inputs.test_project }}
          COLLECT: ${{ inputs.test_collect }}
        run: |
          echo "$PROJECT" |
          while read -r p; do
            dotnet test "$p" --configuration "$CONFIGURATION" --runtime "$RUNTIME" --collect "$COLLECT"
          done
        # The dotnet test command does not support the '--self-contained' option as of Mar 8, 2023 (https://github.com/dotnet/sdk/issues/31066).

      # Publish the application and its dependencies to a folder for deployment.
      - name: Dotnet publish
        id: publish
        env:
          OUTPUT: ${{ runner.temp }}/${{ inputs.artifact_name }}
        run: |
          dotnet publish "$PROJECT" --configuration "$CONFIGURATION" --runtime "$RUNTIME" --self-contained "$SELF_CONTAINED" --output "$OUTPUT" --no-build
          echo "publish_path=$OUTPUT" >> "$GITHUB_OUTPUT"

      # Zip Dotnet publish output in order to drastically improve artifact upload performance.
      - name: Zip
        id: zip
        working-directory: ${{ steps.publish.outputs.publish_path }}
        env:
          ZIP_FILE: ${{ runner.temp }}/${{ inputs.artifact_name }}.zip
        run: |
          zip -r "$ZIP_FILE" .
          echo "zip_file=$ZIP_FILE" >> "$GITHUB_OUTPUT"

      # Upload an artifact containing the application.
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.artifact_name }}
          path: ${{ steps.zip.outputs.zip_file }}
